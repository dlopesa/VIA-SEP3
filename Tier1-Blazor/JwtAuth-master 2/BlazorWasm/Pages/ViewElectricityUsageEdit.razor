@page "/Users/{userId:int}/electricity/{usageId:int}"
@using BlazorWasm.Services
@using global::Shared.Models
@inject NavigationManager navMgr
@inject IUsageHttpService usageHttpService



<h1>Edit Electricity Usage</h1>
<form>
    <div class="form-group">
        <label for="electricityamount">Amount</label>
        <input type="text" @bind="amount" class="form-control" id="electricityamount" placeholder="Enter Electricity Usage Amount">
        <small id="electricityhelp" class="form-text text-muted">We'll never share your electricity usage with anyone else.</small>
    </div>
    <div class="form-group">
        <label for="month">Month</label>
        <input type="text" @bind="month" class="form-control" id="month" placeholder="Enter month of the data inserted">
        <small id="monthhelp" class="form-text text-muted">Month.</small>
    </div>
    <div class="form-group">
        <label for="year">Year</label>
        <input type="text" @bind="year" class="form-control" id="year" placeholder="Enter year of the data insertedt">
        <small id="yearhelp" class="form-text text-muted">Year.</small>
    </div>
    
</form>

<button @onclick="UpdateElectricityUsage" class="btn btn-primary">Submit</button>
<button @onclick="NavigateBack" class="btn btn-dark">Cancel</button>
<button @onclick="DeleteAdvice" class="btn btn-danger">Delete Advice</button>

@if (!string.IsNullOrEmpty(errorLabel))
    {
        <div class="field">
            <label style="color: red">
                @errorLabel
            </label>
        </div>
    }

@code {
    [Parameter]
    public int userId { get; set; }
    
    [Parameter]
    public int usageId { get; set; }
    
    private string amount;
    private string month;
    private string year;
   
    private string errorLabel = "";
    
    protected override async Task OnInitializedAsync()
    {
        await GetElectricityUsage();
    }

    private async Task GetElectricityUsage()
    {
        ICollection<ElectricityUsage> electricityUsages = await usageHttpService.GetElectricityUsagesByUserId(userId);
        ElectricityUsage electricityUsage = electricityUsages.FirstOrDefault(w => w.id == usageId);
        amount = electricityUsage.amount.ToString();
        month = electricityUsage.month.ToString();
        year = electricityUsage.year.ToString();
        
    }

    private async Task UpdateElectricityUsage()
    {
        try
        {
            ElectricityUsage electricityUsage = new ElectricityUsage();
            electricityUsage.id = usageId;
            electricityUsage.amount = Convert.ToInt32(amount);
            electricityUsage.month = Convert.ToInt32(month);
            electricityUsage.year = Convert.ToInt32(year);
            electricityUsage.userId = userId;
            await usageHttpService.UpdateElectricityUsage(electricityUsage);
            NavigateBack();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorLabel = e.Message;
        }
        
    }
    private void NavigateBack()
    {
        navMgr.NavigateTo($"/users/{userId}");
    }
    
    private async Task DeleteAdvice()
    {
        try
        {
            usageHttpService.DeteteElectricityUsage(usageId);
            NavigateBack();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorLabel = e.Message;
        }
    }





}